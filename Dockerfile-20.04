
# base image
FROM nvidia/cuda:11.5.1-cudnn8-devel-ubuntu20.04

ENV DEBIAN_FRONTEND noninteractive

# install utils
RUN apt-get update && \
    apt-get install -y unzip nano git wget sudo build-essential libssl-dev cmake


##########
# PYTHON #
##########

# update python
ARG PYTHON_VERSION=3.8
RUN apt-get install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && apt-get update && \
    apt-get install -y python$PYTHON_VERSION python3-pip

# create list of alternative python interpreters
#RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2 && \
#    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python$PYTHON_VERSION 1 && \
#    update-alternatives --config python3 && \
#    rm /usr/bin/python3 && \
#    ln -s python$PYTHON_VERSION /usr/bin/python3
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python$PYTHON_VERSION 1 && \
    update-alternatives --config python3 && \
    rm /usr/bin/python3 && \
    ln -s python$PYTHON_VERSION /usr/bin/python3

# upgrade pip
RUN python3 -m pip install --upgrade pip


############
# OPENPOSE #
############

# tested with Ubuntu 20.04
ARG OPENPOSE_VERSION=v1.7.0

# prerequisites
RUN apt-get install -y libopencv-dev python3-opencv

# download openpose
WORKDIR /openpose
RUN git clone https://github.com/CMU-Perceptual-Computing-Lab/openpose.git . && \
    git checkout $OPENPOSE_VERSION && \
    git submodule update --init --recursive --remote
# && git checkout v$OPENPOSE_VERSION

# install dependecies
RUN bash ./scripts/ubuntu/install_deps.sh

# install cmake dependencies
RUN apt install -y protobuf-compiler libgoogle-glog-dev

# install additional openpose dependencies
RUN apt install -y libboost-all-dev libhdf5-dev libatlas-base-dev

# install python prerequisites
RUN apt-get install -y python3-dev
RUN pip3 install numpy opencv-python


## install dependencies
#ARG PYTHON_DEV_LIBS=python3.8-dev
#RUN apt-get update -y && \
#apt-get install -y --no-install-recommends \
#$PYTHON_DEV_LIBS g++ make libprotobuf-dev protobuf-compiler libopencv-dev \
#libgoogle-glog-dev libboost-all-dev libcaffe-cuda-dev libhdf5-dev libatlas-base-dev


# build openpose
WORKDIR /openpose/build
RUN cmake \
# bypass models download (sometimes the CMU server with the trained models does not work, blocking compilation)
# see https://github.com/CMU-Perceptual-Computing-Lab/openpose/issues/1602#issuecomment-641653411
          -DDOWNLOAD_BODY_25_MODEL=ON \
          -DDOWNLOAD_COCO_MODEL=ON \
          -DDOWNLOAD_FACE_MODEL=OFF \
          -DDOWNLOAD_HAND_MODEL=OFF \  
          -DUSE_CUDNN=OFF 

#          -DDOWNLOAD_BODY_MPI_MODEL=OFF \
#          -DDOWNLOAD_HAND_MODEL=OFF \
#          -DDOWNLOAD_FACE_MODEL=OFF \
          ..

RUN make -j`nproc`
RUN make install


######################
# set github ssh keys #
#######################

ARG ssh_prv_key
ARG ssh_pub_key

RUN apt-get update && \
apt-get install -y openssh-client git
RUN apt-get install -y \
    libmysqlclient-dev \
    ffmpeg libsm6 libxext6

# Authorize SSH Host
RUN mkdir -p /root/.ssh && \
    chmod 0700 /root/.ssh
RUN ssh-keyscan github.com > /root/.ssh/known_hosts

# Add the keys and set permissions
RUN echo "$ssh_prv_key" > /root/.ssh/id_ed25519 && \
    echo "$ssh_pub_key" > /root/.ssh/id_ed25519.pub && \
    chmod 600 /root/.ssh/id_ed25519 && \
    chmod 600 /root/.ssh/id_ed25519.pub


############
#   YARP   #
############

ARG EVENT_DRIVEN_VERSION=1.5
ARG YARP_VERSION=3.5.0
ARG YCM_VERSION=0.13.0
ARG MUSTARD_FIRST_RELEASE=18e702892f6028c69a2a9e224f459bc26147b20e
ARG BUILD_TYPE=Release
ARG SOURCE_FOLDER=/usr/local/src
ARG OPENGL=0
ARG HPE_BRANCH=main

RUN apt update

RUN apt install -y \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-core \
    swig

# Install yarp dependencies
RUN apt install -y \
        libgsl-dev \
        libedit-dev \
        libace-dev \
        libeigen3-dev \
# Install QT5 for GUIS
# (NOTE: may be not compatible with nvidia drivers when forwarding screen)
        qtbase5-dev \
        qt5-default \
        qtdeclarative5-dev \
        qtmultimedia5-dev \
        qml-module-qtquick2 \
        qml-module-qtquick-window2 \
        qml-module-qtmultimedia \
        qml-module-qtquick-dialogs \
        qml-module-qtquick-controls


# Install YCM
RUN cd $SOURCE_FOLDER && \
    git clone https://github.com/robotology/ycm.git && \
    cd ycm && \
    git checkout v$YCM_VERSION && \
#    # FIXME: remove this line after gitlab fix!!!!!
#    sed -ie 's/libeigen/cantonios/g' 3rdparty/eigen3.cmake && \
    mkdir build && cd build && \
    cmake .. && \
    make -j `nproc` install


# Install YARP
RUN cd $SOURCE_FOLDER && \
    git clone https://github.com/robotology/yarp.git &&\
    cd yarp && \
    git checkout v$YARP_VERSION && \
    mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DYARP_COMPILE_BINDINGS=ON \
          -DCREATE_PYTHON=ON \
          .. && \
    make -j `nproc` install

RUN yarp check
EXPOSE 10000/tcp 10000/udp

# make yarp's python binding visible to python interpreter
ENV PYTHONPATH $SOURCE_FOLDER/yarp/build/lib/python3:$PYTHONPATH

# Some QT-Apps don't show controls without this
ENV QT_X11_NO_MITSHM 1


# install EVENT-DRIVEN
RUN cd $SOURCE_FOLDER && \
    git clone https://github.com/robotology/event-driven.git && \
    cd event-driven && \
    git checkout v$EVENT_DRIVEN_VERSION && \
    mkdir build && cd build && \
    cmake -DVLIB_CLOCK_PERIOD_NS=1000 \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          .. && \
    make install -j$(nproc)


# install BIMVEE
#RUN python3 -m pip install setuptools Cython numpy scipy  # numpy==1.21.4 if using python3.7
#RUN cd $SOURCE_FOLDER && \
#    git clone https://github.com/event-driven-robotics/bimvee --recurse-submodules && \
#    cd bimvee && \
#    python3 setup.py install


# install MUSTARD
#RUN cd $SOURCE_FOLDER && \
#    git clone https://github.com/event-driven-robotics/mustard && \
#    cd mustard && \
#    # checkout first release commit
#    git checkout $MUSTARD_FIRST_RELEASE && \
#    python3 setup.py install

## make mustard visible to python
#ENV MUSTARD_DIR $SOURCE_FOLDER/mustard
#ENV PYTHONPATH $MUSTARD_DIR:$PYTHONPATH



############
# HPE-CORE #
############

# install e2vid dependencies
RUN python3 -m pip install --upgrade pip && \
    python3 -m pip install torch==1.9.1 torchvision==0.10.1 pandas scipy opencv-python

#ENV PYTHONHOME=/root/anaconda/bin
#ENV PYTHONPATH=/root/anaconda/lib:/root/anaconda/lib/python3.8:/root/anaconda/lib/python3.8/site-packages
#ENV PATH=$PYTHONHOME:$PATH

# download hpe-core
RUN cd $SOURCE_FOLDER && \
    git clone --branch core-dev git@github.com:event-driven-robotics/hpe-core.git

# add /usr/local/lib to the library path, so that libcaffe.so compiled with openpose will be used
# instead of the one provided by the nvidia/cuda docker image
ENV LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH

# download e2vid
RUN cd $SOURCE_FOLDER/hpe-core/example/op_detector_example_module/e2vid && \
    git clone git@github.com:uzh-rpg/rpg_e2vid.git && \
    # fix e2vid incompatibility with recent pytorch versions (https://github.com/uzh-rpg/rpg_e2vid/issues/5) \
    cd rpg_e2vid && \
    sed -ie 's/index=xs[valid_indices]/index=(xs[valid_indices]/g' utils/inference_utils.py && \
    sed -ie 's/tis_long[valid_indices] * width * height/tis_long[valid_indices] * width * height).type(torch.cuda.LongTensor)/g' utils/inference_utils.py && \
    sed -ie 's/tis_long[valid_indices] + 1) * width * height/tis_long[valid_indices] + 1) * width * height).type(torch.cuda.LongTensor)/g' utils/inference_utils.py && \
    # download e2vid pretrained model
    wget "http://rpg.ifi.uzh.ch/data/E2VID/models/E2VID_lightweight.pth.tar" -O pretrained/E2VID_lightweight.pth.tar

# move custom python scripts to rpg_e2vid dir
RUN mv $SOURCE_FOLDER/hpe-core/example/op_detector_example_module/e2vid/*.py $SOURCE_FOLDER/hpe-core/example/op_detector_example_module/e2vid/rpg_e2vid

# define a system variable with e2vid's location; it will be used by the C++ wrapper
ENV E2VID_PYTHON_DIR $SOURCE_FOLDER/hpe-core/example/op_detector_example_module/e2vid/rpg_e2vid

# compile and install hpe-core
RUN cd $SOURCE_FOLDER/hpe-core/core && \
    mkdir build && cd build && \
    cmake .. && \
    make install -j$(nproc)

# make e2vid scripts visible to python interpreter
ENV PYTHONPATH $E2VID_PYTHON_DIR:$PYTHONPATH

RUN cd $SOURCE_FOLDER/hpe-core/example/op_detector_example_module && \
    mkdir build && cd build && \
    cmake .. && \
    make install -j$(nproc)

RUN ssh-keyscan git.robotology.eu > /root/.ssh/known_hosts
RUN cd $SOURCE_FOLDER && \
    git clone --branch fusion-dev git@git.robotology.eu:isaac/wp5-hpe.git && \
    cd wp5-hpe && mkdir build && cd build && \
    cmake .. && make install -j$(nproc)



WORKDIR $SOURCE_FOLDER
